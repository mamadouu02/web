const app = require('../app')
const request = require('supertest')

test('endpoint not found', async () => {
  const response = await request(app)
    .get('/')
  expect(response.statusCode).toBe(404)
  expect(response.body.message).toBe('Endpoint Not Found')
})

test('user cannot register without name', async () => {
  const response = await request(app)
    .post('/register')
    .send({ email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the name and email')
})

test('user cannot register without email', async () => {
  const response = await request(app)
    .post('/register')
    .send({ name: 'John Doe', password: 'Test123!' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the name and email')
})

test('user cannot register without password', async () => {
  const response = await request(app)
    .post('/register')
    .send({ name: 'John Doe', email: 'John.Doe@acme.com' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the name and email')
})

test('user cannot register with weak password', async () => {
  const response = await request(app)
    .post('/register')
    .send({ name: 'John Doe', email: 'John.Doe@acme.com', password: 'password' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('Weak password!')
})

test('user can register', async () => {
  const response = await request(app)
    .post('/register')
    .send({ name: 'John Doe', email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('status', true)
  expect(response.body.message).toBe('User Added')
})

test('user cannot register with existing email', async () => {
  const response = await request(app)
    .post('/register')
    .send({ name: 'Sebastien Viardot', email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(400)
})

test('user cannot log in without email', async () => {
  const response = await request(app)
    .post('/login')
    .send({ password: 'Test123!' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the email and password')
})

test('user cannot log in without password', async () => {
  const response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the email and password')
})

test('user cannot log in with wrong email', async () => {
  const response = await request(app)
    .post('/login')
    .send({ email: 'wrong@example.com', password: 'Test123!' })
  expect(response.statusCode).toBe(403)
  expect(response.body).toHaveProperty('status', false)
  expect(response.body.message).toBe('Wrong email/password')
})

test('user cannot log in with wrong password', async () => {
  const response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com', password: 'wrong_password' })
  expect(response.statusCode).toBe(403)
  expect(response.body).toHaveProperty('status', false)
  expect(response.body.message).toBe('Wrong email/password')
})

test('user can log in and list users', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('status', true)
  expect(response.body.message).toBe('Login/Password ok')
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .get('/api/users')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('status', true)
  expect(response.body.message).toBe('Returning users')
  expect(response.body.data.length).toBeGreaterThan(0)
})

test('user cannot list users without token', async () => {
  const response = await request(app)
    .get('/api/users')
  expect(response.statusCode).toBe(403)
  expect(response.body.message).toBe('Token missing')
})

test('user cannot list users with invalid token', async () => {
  const response = await request(app)
    .get('/api/users')
    .set('x-access-token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImV4YW1wbGVAZXhhbXBsZS5jb20ifQ.3MkY4SoyXO9mP_Dk1FiS1VwTtXTsCyEVVMjA3BqlPC0')
  expect(response.statusCode).toBe(403)
  expect(response.body.message).toBe('Token invalid')
})

test('user cannot update password without password', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/password')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the password')
})

test('user cannot update password with weak password', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/password')
    .set('x-access-token', response.body.token)
    .send({ password: 'password' })
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('Weak password!')
})

test('user can update password', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/password')
    .set('x-access-token', response.body.token)
    .send({ password: 'Test321!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('status', true)
  expect(response.body).toHaveProperty('message', 'Password updated')
})

test('admin can update user', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/users/5')
    .set('x-access-token', response.body.token)
    .send({ name: 'Doe John', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('status', true)
  expect(response.body).toHaveProperty('message', 'User updated')
})

test('admin cannot update user without name, email or password', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/users/5')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(400)
  expect(response.body.message).toBe('You must specify the name, email or password')
})

test('non-admin cannot update user', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/users/5')
    .set('x-access-token', response.body.token)
    .send({ password: 'Test321!' })
  expect(response.statusCode).toBe(403)
  expect(response.body.message).toBe('You must be an admin')
})

test('non-admin cannot delete user', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'John.Doe@acme.com', password: 'Test123!' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/users/5')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(403)
  expect(response.body.message).toBe('You must be an admin')
})

test('admin can delete user', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/users/5')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('status', true)
  expect(response.body).toHaveProperty('message', 'User deleted')
})
